<?php

namespace Tests\Unit;

use App\Http\Controllers\Backend\Index\IndexController;
use App\Services\ReportService;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

class CountTest extends TestCase
{
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        DB::table('employee')->insert(['name' => 'test_emp', 'department' => 'test_dep']);
    }

    public function tearDown()
    {
        DB::table('employee')->where('name', 'test_emp')->delete();
        DB::table('people_log')->where('name', 'test_emp')->delete();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function dateProvider()
    {
        return [['time_list' => $this->getTimeList()]];
    }

    public function getTimeList()
    {
            $began_time = strtotime('2018-06-01') + 8.5 * 60 * 60;
            $end_time = strtotime('2018-06-30') + 8.5 * 60 * 60;
            for ($began_time; $began_time <= $end_time; $began_time += 60 * 60 * 24) {
                $time['time_range'][] = intval($began_time);
                $time['time_range'][] = intval($began_time + 9 * 60 * 60);
            }
            return $time;
    }

    /**
     * @dataProvider dateProvider
     */
    public function testGetTime($expect_time,  $id = 1)
    {
        $c = new IndexController();
        $actual_times = $c->getTime($id);
        $this->assertSame($expect_time, $actual_times);
    }

    /**
     * @dataProvider dateProvider
     */
    public function testGetLogAbsenteeism($expect_time)
    {
        $report = DB::table('reports')->first();
        $report_service = new ReportService($report, $expect_time, ['test_department']);
        $employee = DB::table('employee')->where('name', 'test_emp')->get();
        $result = $report_service->getData($employee, $expect_time);
        $expect_time = array_map(function ($v){ return date('Y-m-d a', $v);}, $expect_time['time_range']);
        $this->assertSame($expect_time, $result['times']);
        $expect_log = $this->getExpectLog('旷工');
        $this->assertSame($expect_log, $result['log']);
    }

    /**
     * @dataProvider dateProvider
     */
    public function testGetLogLate($expect_time)
    {
        $report = DB::table('reports')->first();
        $report_service = new ReportService($report, $expect_time, ['test_department']);
        $employee = DB::table('employee')->where('name', 'test_emp')->get();
        $this->insertLog($expect_time['time_range'][0]+1);
        $result = $report_service->getData($employee, $expect_time);
        $expect_time = array_map(function ($v){ return date('Y-m-d a', $v);}, $expect_time['time_range']);
        $this->assertSame($expect_time, $result['times']);
        $expect_log = $this->getExpectLog('迟到');
        $this->assertSame($expect_log, $result['log']);
    }

    /**
     * @dataProvider dateProvider
     */
    public function testGetLogNormal($expect_time)
    {
        $report = DB::table('reports')->first();
        $report_service = new ReportService($report, $expect_time, ['test_department']);
        $employee = DB::table('employee')->where('name', 'test_emp')->get();
        $this->insertLog($expect_time['time_range'][0]);
        $result = $report_service->getData($employee, $expect_time);
        $expect_time = array_map(function ($v){ return date('Y-m-d a', $v);}, $expect_time['time_range']);
        $this->assertSame($expect_time, $result['times']);
        $expect_log = $this->getExpectLog('正常上班');
        $this->assertSame($expect_log, $result['log']);
    }

    /**
     * @dataProvider dateProvider
     */
    public function testGetLogEarly($expect_time)
    {
        $report = DB::table('reports')->first();
        $report_service = new ReportService($report, $expect_time, ['test_department']);
        $employee = DB::table('employee')->where('name', 'test_emp')->get();
        $this->insertLog($expect_time['time_range'][1]-1,'出口');
        $result = $report_service->getData($employee, $expect_time);
        $expect_time = array_map(function ($v){ return date('Y-m-d a', $v);}, $expect_time['time_range']);
        $this->assertSame($expect_time, $result['times']);
        $expect_log = $this->getExpectLog('早退');
        $this->assertSame($expect_log, $result['log']);
    }

    public function getExpectLog($type)
    {
        for ($i = 1; $i<=60; $i++)
        {
            $expect_log['test_deptest_emp'][] = '旷工';
        }
        switch ($type)
        {
            case '迟到':
                $expect_log['test_deptest_emp'][0] = '迟到';
                break;
            case '正常上班':
                $expect_log['test_deptest_emp'][0] = '正常上班';
                break;
            case '早退':
                $expect_log['test_deptest_emp'][1] = '早退';
                break;
        }
        return $expect_log;
    }

    public function insertLog($expect_time, $door = '入口')
    {
        DB::table('people_log')->insert(['name' => 'test_emp', 'department' => 'test_dep', 'door' => $door,
            'time' =>$expect_time]);
    }
}
